# ===================================================================================
# ==         README: Single Run, Progressive Promotion Pipeline (Templates)      ==
# ===================================================================================
#
# This pipeline manages the entire release lifecycle in a single run. It uses
# job templates for the complex promotion logic, keeping this file clean and declarative.
#
# ===================================================================================

trigger:
  branches:
    include:
      - dev

pr:
  branches:
    include:
      - dev
      - release/*

resources:
  repositories:
    - repository: templates
      type: git
      name: YourPlatformProject/cicd-platform
      ref: main

variables:
  # ... (All your variables)
  - name: serviceName
    value: 'manubank-transactions-microservice'
  - name: acrName
    value: 'acrmanubankdev'

stages:
# STAGE 1 & 2: Build and Deploy to Dev
- stage: Build_And_Deploy_Dev
  displayName: '1. Build & Deploy to Dev'
  # This stage contains the initial build and deploy to dev jobs.
  # ... (This part of your pipeline remains the same)

# ============================ THE CHANGE IS HERE ============================
# STAGE 3: MANUAL GATE and Promotion to QA
- stage: Promote_To_QA
  displayName: '2. Promote to QA'
  dependsOn: Build_And_Deploy_Dev
  condition: succeeded()
  # This stage now consists of a single, powerful template call.
  jobs:
  - template: pipelines/management/promote-to-qa.yml@templates
    parameters:
      serviceName: $(serviceName)
      acrName: $(acrName)
      # Pass the path to the build template so it can be called internally
      buildTemplatePath: pipelines/build/kotlin-docker-build.yml@templates
# ============================================================================

# STAGE 4: Deploy the RC artifact to QA.
- stage: Deploy_To_QA
  displayName: '3. Deploy to QA'
  # It now depends on the entire promotion stage.
  dependsOn: Promote_To_QA
  condition: succeeded()
  jobs:
  - deployment: Deploy_To_QA_East
    displayName: 'Deploy to QA East US'
    environment: 'QA Environment - Region 1'
    pool: { name: 'MB_Hub_QA_EAST' }
    variables:
      # The output variable path is now more complex, as it comes from a nested job.
      imageTag: $[ stageDependencies.Promote_To_QA.Build_RC_Artifact.outputs['BuildJob.SetImageTag.imageTag'] ]
    strategy: { runOnce: { deploy: { steps:
      # ... (Standard deploy steps)

# STAGE 5 & 6: Promotion and Deployment to Production
- stage: Promote_To_Prod
  displayName: '4. Promote to Prod'
  dependsOn: Deploy_To_QA
  # ... (This stage can also be templatized in the same way)