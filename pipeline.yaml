# ===================================================================================
# ==         README: Create Release Pipeline (Final, Corrected Paths)            ==
# ===================================================================================
#
# PURPOSE:
# This is the definitive pipeline for starting a new release for a single microservice.
#
# CORRECTION (Definitive Pathing Fix):
# This version simplifies the checkout logic to resolve file path errors.
# 1.  The confusing `checkout: self, path: 'platform'` step has been REMOVED. The
#     pipeline agent automatically checks out its own repository to the default
#     working directory.
# 2.  The `CopyFiles` task's 'SourceFolder' has been corrected to point to the
#     now-simple path: `$(System.DefaultWorkingDirectory)/config`.
# This creates a predictable file structure and is the most reliable solution.
#
# ===================================================================================

trigger: none
pr: none

parameters:
- name: microserviceProjectName
  displayName: 'Microservice Project Name'
  type: string
  default: 'API Engineering'
- name: repositoryName
  displayName: 'Microservice to Release'
  type: string
  default: 'manubank-transactions-microservice'
  values:
    - order-service
    - payment-service
    - manubank-transactions-microservice

pool:
  name: 'MB_DevOps'

jobs:
- job: CreateReleaseForSingleService
  displayName: 'Create Release for ${{ parameters.repositoryName }}'
  workspace:
    clean: all
  
  steps:
  # The agent automatically checks out this pipeline's repo ('self') by default.
  # No 'checkout: self' step is needed.

  # Step 1: Install tools.
  - task: Bash@3
    displayName: 'Install Tools'
    inputs:
      targetType: 'inline'
      script: |
        echo '{ "name": "create-release-tools", "version": "1.0.0" }' > package.json
        npm install semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/exec

  # Step 2: Manually clone the target microservice repo into a 'service-repo' subdirectory.
  - task: Bash@3
    displayName: 'Clone & Checkout Microservice Repo'
    inputs:
      targetType: 'inline'
      env:
        GIT_TOKEN: $(System.AccessToken)
      script: |
        set -e
        # IMPORTANT: Replace 'YourOrgName' with your actual organization name.
        PROJECT_NAME_ENCODED=$(echo "${{ parameters.microserviceProjectName }}" | sed 's/ /%20/g')
        REPO_URL="https://x-token-auth:$(GIT_TOKEN)@dev.azure.com/YourOrgName/${PROJECT_NAME_ENCODED}/_git/${{ parameters.repositoryName }}"
        
        echo "Cloning microservice repository into 'service-repo' directory..."
        git clone "$REPO_URL" service-repo
        
        echo "Switching to 'develop' branch..."
        cd service-repo
        git checkout develop
        # No need to cd back, the next task starts in the default directory.

  # ============================ THE FIX IS HERE ============================
  # Step 3: Copy the central config file into the microservice directory.
  - task: CopyFiles@2
    displayName: 'Copy Central .releaserc.json'
    inputs:
      # The source is now at the correct, simple path.
      SourceFolder: '$(System.DefaultWorkingDirectory)/config'
      Contents: 'common.releaserc.json'
      TargetFolder: '$(System.DefaultWorkingDirectory)/service-repo'
      OverWrite: true
  - task: PowerShell@2
    displayName: 'Rename config file'
    inputs:
      targetType: 'inline'
      # The path to the copied file is now correct.
      script: 'Rename-Item -Path "$(System.DefaultWorkingDirectory)/service-repo/common.releaserc.json" -NewName ".releaserc.json"'
  # =======================================================================

  # Step 4: Run semantic-release on the microservice repo.
  - task: Bash@3
    displayName: 'Calculate Next Version'
    inputs:
      workingDirectory: '$(System.DefaultWorkingDirectory)/service-repo'
      targetType: 'inline'
      env:
        GIT_TOKEN: $(System.AccessToken)
        GH_TOKEN: $(System.AccessToken)
      script: |
        npx semantic-release || true
  
  # Step 5: Read the version and create the release branch.
  - task: Bash@3
    displayName: 'Create and Push Release Branch'
    inputs:
      workingDirectory: '$(System.DefaultWorkingDirectory)/service-repo'
      targetType: 'inline'
      env:
        GIT_TOKEN: $(System.AccessToken)
      script: |
        set -e
        if [ -f "next-version.txt" ]; then
          NEXT_VERSION=$(cat next-version.txt)
          echo "Found new version: $NEXT_VERSION. Creating release branch."

          git config --global user.email "pipeline@azuredevops.com"
          git config --global user.name "Azure DevOps Pipeline"
          
          RELEASE_BRANCH="release/$NEXT_VERSION"
          git checkout -b $RELEASE_BRANCH

          REPO_URL=$(git config --get remote.origin.url)
          AUTH_REPO_URL="https://x-token-auth:$(GIT_TOKEN)@${REPO_URL#https://}"
          git push $AUTH_REPO_URL $RELEASE_BRANCH
        else
          echo "No new changes to release."
        fi
