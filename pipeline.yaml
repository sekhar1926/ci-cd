# ===================================================================================
# ==           README: MICROSERVICE CI/CD PIPELINE (Values File Model)             ==
# ===================================================================================
#
# PURPOSE:
# This file defines the complete CI/CD process for THIS specific microservice using
# the "Values File per Environment" strategy. This is the recommended and most
# robust architecture for managing configuration at scale.
#
# HOW IT WORKS:
# 1.  **Configuration in Files:** All environment-specific configuration (replicas,
#     namespaces, secrets, etc.) now lives in dedicated YAML files within the
#     `/helm-values` directory of this repository.
#
# 2.  **Pipeline as Orchestrator:** This pipeline's primary job is to orchestrate the
#     process. It determines which environment to deploy to (based on the Git branch)
#     and tells the deploy template which configuration file to use for that deployment.
#
# 3.  **Simple & Stable Templates:** It calls standardized, simple templates from the
#     central 'cicd-platform' for the actual build and deploy logic. This separates
#     the "what" (this file's configuration) from the "how" (the platform's logic).
#
# HOW TO CONFIGURE A NEW SERVICE:
# 1.  Copy this file into the root of the new microservice's repository.
# 2.  Create a `/helm-values` directory.
# 3.  Inside `/helm-values`, create a YAML file for each deployment target (e.g.,
#     `dev.yaml`, `qa-eastus.yaml`, `prod-westus.yaml`).
# 4.  Update the `variables` block in this file to match the new service's name
#     and point to the correct values files.
#
# ===================================================================================

# --- Triggers: Defines WHEN this pipeline runs ---
trigger:
  branches: { include: [main, develop, release/*] }
  tags: { include: [v*.*.*] }
pr:
  branches: { include: [main, develop, release/*] }

# --- Resources: Connects to the central CI/CD platform templates ---
resources:
  repositories:
    - repository: templates
      type: git
      name: YourProject/cicd-platform
      ref: main # BEST PRACTICE: Pin to a specific tag like 'refs/tags/v1.0.0'

# --- Variables: Defines the unique configuration for THIS microservice ---
variables:
  # --- Global Info for this Service ---
  - name: serviceName
    value: 'order-service'
  - name: acrName
    value: 'mycompanyacr'
  - name: chartPath
    value: 'charts/common-app'

  # --- Agent Pool Names - Mapped to your segregated pool strategy ---
  - name: buildAgentPoolName # This is for clarity, but the pool is hardcoded in the build template.
    value: 'MB_DevOps'
  - name: devDeployAgentPoolName
    value: 'MB_Hub'
  - name: qaEastDeployAgentPoolName
    value: 'MB_Hub_QA_EAST'
  - name: qaWestDeployAgentPoolName
    value: 'MB_Hub_QA_WEST'
  - name: prodEastDeployAgentPoolName
    value: 'MB_Hub_Prod_EAST'
  - name: prodWestDeployAgentPoolName
    value: 'MB_Hub_prod_WEST'
    
  # --- Kubernetes Service Connection Names ---
  - name: acrConnection
    value: 'acr-service-connection'
  - name: devKubeServiceConnection
    value: 'dev-kube-sc'
  - name: qaRegion1KubeServiceConnection
    value: 'qa-eastus-kube-sc'
  - name: qaRegion2KubeServiceConnection
    value: 'qa-westus-kube-sc'
  - name: prodRegion1KubeServiceConnection
    value: 'prod-eastus-kube-sc'
  - name: prodRegion2KubeServiceConnection
    value: 'prod-westus-kube-sc'

  # --- Paths to Environment Configuration Files ---
  - name: devValuesFile
    value: 'helm-values/dev.yaml'
  - name: qaValuesFile
    value: 'helm-values/qa.yaml' # A file for values common to both QA regions
  - name: prodValuesFile
    value: 'helm-values/prod.yaml' # A file for values common to both Prod regions

# --- Stages: The sequence of operations, executed by calling templates ---
stages:
# STAGE 1: Build the application. This runs for PRs and regular builds.
- template: pipelines/build/kotlin-docker-build.yml@templates
  parameters:
    serviceName: $(serviceName)
    acrName: $(acrName)
    acrConnection: $(acrConnection)

# STAGE 2: Deploy the application. This stage is skipped for PRs.
- stage: Deploy
  displayName: 'Deploy Application to Environments'
  dependsOn: Build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:

  # --- DEV DEPLOYMENT JOB ---
  - deployment: Deploy_Dev
    displayName: 'Deploy to Dev'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
    environment: 'DEV Environment' # Links to an environment, but typically without approvals
    pool:
      name: $(devDeployAgentPoolName)
    variables:
      imageTag: $[ stageDependencies.Build.BuildJob.outputs['SetImageTag.imageTag'] ]
    strategy:
      runOnce:
        deploy:
          steps:
          # The template is now called inside the deployment job's steps
          - template: pipelines/deploy/aks-helm-deploy.yml@templates
            parameters:
              serviceName: $(serviceName)
              acrName: $(acrName)
              chartPath: $(chartPath)
              kubeServiceConnection: $(devKubeServiceConnection)
              valuesFile: $(devValuesFile)

  # --- QA DEPLOYMENT JOBS ---
  - deployment: Deploy_QA_East
    displayName: 'Deploy to QA East US'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
    environment: 'QA Environment - Region 1' # THIS IS THE APPROVAL HOOK
    pool: { name: $(qaEastDeployAgentPoolName) }
    variables: { imageTag: $[ stageDependencies.Build.BuildJob.outputs['SetImageTag.imageTag'] ] }
    strategy: { runOnce: { deploy: { steps:
    - template: pipelines/deploy/aks-helm-deploy.yml@templates
      parameters:
        serviceName: $(serviceName)
        acrName: $(acrName)
        chartPath: $(chartPath)
        kubeServiceConnection: $(qaRegion1KubeServiceConnection)
        valuesFile: $(qaValuesFile)
    } } } } # Note: closing braces for strategy
  - deployment: Deploy_QA_West
    displayName: 'Deploy to QA West US'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
    environment: 'QA Environment - Region 2' # THIS IS THE APPROVAL HOOK
    pool: { name: $(qaWestDeployAgentPoolName) }
    variables: { imageTag: $[ stageDependencies.Build.BuildJob.outputs['SetImageTag.imageTag'] ] }
    strategy: { runOnce: { deploy: { steps:
    - template: pipelines/deploy/aks-helm-deploy.yml@templates
      parameters:
        serviceName: $(serviceName)
        acrName: $(acrName)
        chartPath: $(chartPath)
        kubeServiceConnection: $(qaRegion2KubeServiceConnection)
        valuesFile: $(qaValuesFile)
    } } } }

  # --- PROD DEPLOYMENT JOBS ---
  - deployment: Deploy_Prod_East
    displayName: 'Deploy to Prod East US'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
    environment: 'PROD Environment - Region 1' # THIS IS THE APPROVAL HOOK
    pool: { name: $(prodEastDeployAgentPoolName) }
    variables: { imageTag: $[ stageDependencies.Build.BuildJob.outputs['SetImageTag.imageTag'] ] }
    strategy: { runOnce: { deploy: { steps:
    - template: pipelines/deploy/aks-helm-deploy.yml@templates
      parameters:
        serviceName: $(serviceName)
        acrName: $(acrName)
        chartPath: $(chartPath)
        kubeServiceConnection: $(prodRegion1KubeServiceConnection)
        valuesFile: $(prodValuesFile)
    } } } }
  - deployment: Deploy_Prod_West
    displayName: 'Deploy to Prod West US'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
    environment: 'PROD Environment - Region 2' # THIS IS THE APPROVAL HOOK
    pool: { name: $(prodWestDeployAgentPoolName) }
    variables: { imageTag: $[ stageDependencies.Build.BuildJob.outputs['SetImageTag.imageTag'] ] }
    strategy: { runOnce: { deploy: { steps:
    - template: pipelines/deploy/aks-helm-deploy.yml@templates
      parameters:
        serviceName: $(serviceName)
        acrName: $(acrName)
        chartPath: $(chartPath)
        kubeServiceConnection: $(prodRegion2KubeServiceConnection)
        valuesFile: $(prodValuesFile)
    } } } }