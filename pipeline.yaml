# ===================================================================================
# ==         README: Create Release Pipeline (Definitive, Correct Paths)         ==
# ===================================================================================
#
# PURPOSE:
# This is the definitive pipeline for starting a new release for a single microservice.
#
# ARCHITECTURE (The Definitive Fix):
# This version uses the simplest and most reliable file structure.
#   1.  **Default Checkout:** It relies on the agent's default behavior, which
#       automatically checks out this 'cicd-platform' repository to the root of the
#       working directory. No explicit 'checkout: self' step is needed.
#   2.  **Explicit Clone:** It uses a 'git clone' command to place the target
#       microservice into a predictable 'service-repo' subdirectory.
#   3.  **Clear Paths:** All subsequent tasks now use simple, unambiguous paths to
#       find the central config file and the microservice code.
#
# This architecture is the most robust and solves all previous pathing errors.
#
# ===================================================================================

trigger: none
pr: none

parameters:
- name: microserviceProjectName
  displayName: 'Microservice Project Name'
  type: string
  default: 'API Engineering'
- name: repositoryName
  displayName: 'Microservice to Release'
  type: string
  default: 'manubank-transactions-microservice'
  values:
    - order-service
    - payment-service
    - manubank-transactions-microservice

pool:
  name: 'MB_DevOps'

jobs:
- job: CreateReleaseForSingleService
  displayName: 'Create Release for ${{ parameters.repositoryName }}'
  workspace:
    clean: all
  
  steps:
  # NOTE: The agent automatically checks out this pipeline's own repository ('self')
  # into the default working directory at the start of the job.

  # Step 1: Install tools. This runs at the root of the workspace.
  - task: Bash@3
    displayName: 'Install Tools'
    inputs:
      targetType: 'inline'
      script: |
        echo '{ "name": "create-release-tools", "version": "1.0.0" }' > package.json
        npm install semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/exec

  # Step 2: Manually clone the target microservice repo into a 'service-repo' subdirectory.
  - task: Bash@3
    displayName: 'Clone & Checkout Microservice Repo'
    env:
      GIT_TOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |
        set -e
        # IMPORTANT: Replace 'YourOrgName' with your actual organization name.
        PROJECT_NAME_ENCODED=$(echo "${{ parameters.microserviceProjectName }}" | sed 's/ /%20/g')
        REPO_URL="https://x-token-auth:$(GIT_TOKEN)@dev.azure.com/YourOrgName/${PROJECT_NAME_ENCODED}/_git/${{ parameters.repositoryName }}"
        
        echo "Cloning microservice repository into 'service-repo' directory..."
        git clone "$REPO_URL" service-repo
        
        echo "Switching to 'develop' branch..."
        cd service-repo
        git checkout develop
        # No 'cd ..' is needed. The next task will use its own working directory.

  # ============================ THE FIX IS HERE ============================
  # Step 3: Copy the central config file from this repo's checkout to the microservice checkout.
  - task: CopyFiles@2
    displayName: 'Copy Central .releaserc.json'
    inputs:
      # The source is now at the correct, simple path.
      SourceFolder: '$(System.DefaultWorkingDirectory)/config'
      Contents: 'common.releaserc.json'
      TargetFolder: '$(System.DefaultWorkingDirectory)/service-repo'
      OverWrite: true
  - task: PowerShell@2
    displayName: 'Rename config file'
    inputs:
      targetType: 'inline'
      # The path to the copied file is now correct.
      script: 'Rename-Item -Path "$(System.DefaultWorkingDirectory)/service-repo/common.releaserc.json" -NewName ".releaserc.json"'
  # =======================================================================

  # Step 4: Run semantic-release on the microservice repo.
  - task: Bash@3
    displayName: 'Calculate Next Version'
    env:
      GIT_TOKEN: $(System.AccessToken)
      GH_TOKEN: $(System.AccessToken)
    inputs:
      # Set the working directory to where we cloned the microservice.
      workingDirectory: '$(System.DefaultWorkingDirectory)/service-repo'
      targetType: 'inline'
      script: |
        # Run semantic-release. The '|| true' ensures the pipeline doesn't fail
        # if there are no new changes to release.
        npx semantic-release || true
  
  # Step 5: Read the version from the generated file and create the release branch.
  - task: Bash@3
    displayName: 'Create and Push Release Branch'
    env:
      GIT_TOKEN: $(System.AccessToken)
    inputs:
      # Set the working directory to the microservice repo.
      workingDirectory: '$(System.DefaultWorkingDirectory)/service-repo'
      targetType: 'inline'
      script: |
        set -e
        if [ -f "next-version.txt" ]; then
          NEXT_VERSION=$(cat next-version.txt)
          echo "Found new version: $NEXT_VERSION. Creating release branch."

          git config --global user.email "pipeline@azuredevops.com"
          git config --global user.name "Azure DevOps Pipeline"
          
          RELEASE_BRANCH="release/$NEXT_VERSION"
          git checkout -b $RELEASE_BRANCH

          REPO_URL=$(git config --get remote.origin.url)
          AUTH_REPO_URL="https://x-token-auth:$(GIT_TOKEN)@${REPO_URL#https://}"
          git push $AUTH_REPO_URL $RELEASE_BRANCH
        else
          echo "No 'next-version.txt' file found. This means there were no new changes to release."
        fi
          { "type": "docs", "scope": "README", "release": "patch" },
          { "type": "style", "release": "patch" },
          { "type": "refactor", "release": "patch" },
          { "type": "chore", "release": "patch" },
          { "type": "build", "release": "patch" },
          { "type": "ci", "release": "patch" },
          { "type": "revert", "release": "patch" },
          { "breaking": true, "release": "major" },
          { "type": "feat", "release": "minor" },
          { "type": "fix", "release": "patch" },
          { "type": "perf", "release": "patch" }
