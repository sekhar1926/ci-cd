# ===================================================================================
# ==         README: Create Release Pipeline (Centralized Config)                ==
# ===================================================================================
#
# PURPOSE:
# This is the definitive pipeline for starting a new release for a single microservice.
# It uses a centralized 'semantic-release' configuration, which is a best practice
# for managing many services.
#
# HOW IT WORKS:
# 1.  **Manual Trigger & Dropdown:** A user selects a microservice from a dropdown.
# 2.  **Clone & Checkout:** It clones the target microservice repository.
# 3.  **Copy Central Config:** It copies the standard '.releaserc.json' file from this
#     platform repository into the checked-out microservice directory. This ensures
#     every service uses the exact same release logic.
# 4.  **Calculate Version & Write to File:** It runs 'semantic-release', which finds
#     the config file and writes the new version to 'next-version.txt'.
# 5.  **Create Release Branch:** It reads the version from the file and creates the
#     release branch.
#
# This workflow requires ZERO release-specific configuration in the microservice repos.
#
# ===================================================================================

trigger: none
pr: none

parameters:
- name: microserviceProjectName
  displayName: 'Microservice Project Name'
  type: string
  default: 'API Engineering'
- name: repositoryName
  displayName: 'Microservice to Release'
  type: string
  default: 'manubank-transactions-microservice'
  values:
    - order-service
    - payment-service
    - manubank-transactions-microservice

pool:
  name: 'MB_DevOps'

jobs:
- job: CreateReleaseForSingleService
  displayName: 'Create Release for ${{ parameters.repositoryName }}'
  workspace:
    clean: all
  
  steps:
  # Step 1: Check out the platform repo first to get the config file.
  - checkout: self
    path: 'platform' # Check out into a 'platform' subdirectory

  # Step 2: Install tools.
  - task: Bash@3
    displayName: 'Install Tools'
    inputs:
      targetType: 'inline'
      script: |
        echo '{ "name": "create-release-tools", "version": "1.0.0" }' > package.json
        npm install semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/exec

  # Step 3: Manually clone the target microservice repo into a separate directory.
  - task: Bash@3
    displayName: 'Clone & Checkout Microservice Repo'
    env:
      GIT_TOKEN: $(System.AccessToken)
    script: |
      set -e
      # IMPORTANT: Replace 'YourOrgName' with your actual organization name.
      PROJECT_NAME_ENCODED=$(echo "${{ parameters.microserviceProjectName }}" | sed 's/ /%20/g')
      REPO_URL="https://x-token-auth:$(GIT_TOKEN)@dev.azure.com/YourOrgName/${PROJECT_NAME_ENCODED}/_git/${{ parameters.repositoryName }}"
      
      echo "Cloning microservice repository into 'service-repo' directory..."
      git clone "$REPO_URL" service-repo
      
      echo "Switching to 'develop' branch..."
      cd service-repo
      git checkout develop
      cd ..

  # Step 4: Copy the central config file into the microservice directory.
  - task: CopyFiles@2
    displayName: 'Copy Central .releaserc.json'
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)/platform/config'
      Contents: 'common.releaserc.json'
      TargetFolder: '$(System.DefaultWorkingDirectory)/service-repo'
      # Rename the file to what semantic-release expects by default.
      OverWrite: true
  - task: PowerShell@2
    displayName: 'Rename config file'
    inputs:
      targetType: 'inline'
      script: 'Rename-Item -Path "$(System.DefaultWorkingDirectory)/service-repo/common.releaserc.json" -NewName ".releaserc.json"'

  # Step 5: Run semantic-release on the microservice repo.
  - task: Bash@3
    displayName: 'Calculate Next Version'
    # Set the working directory to the microservice repo.
    workingDirectory: '$(System.DefaultWorkingDirectory)/service-repo'
    env:
      GIT_TOKEN: $(System.AccessToken)
      GH_TOKEN: $(System.AccessToken)
    script: |
      npx semantic-release || true
  
  # Step 6: Read the version and create the release branch.
  - task: Bash@3
    displayName: 'Create and Push Release Branch'
    # Set the working directory to the microservice repo.
    workingDirectory: '$(System.DefaultWorkingDirectory)/service-repo'
    env:
      GIT_TOKEN: $(System.AccessToken)
    script: |
      set -e
      if [ -f "next-version.txt" ]; then
        NEXT_VERSION=$(cat next-version.txt)
        echo "Found new version: $NEXT_VERSION. Creating release branch."

        git config --global user.email "pipeline@azuredevops.com"
        git config --global user.name "Azure DevOps Pipeline"
        
        RELEASE_BRANCH="release/$NEXT_VERSION"
        git checkout -b $RELEASE_BRANCH

        REPO_URL=$(git config --get remote.origin.url)
        AUTH_REPO_URL="https://x-token-auth:$(GIT_TOKEN)@${REPO_URL#https://}"
        git push $AUTH_REPO_URL $RELEASE_BRANCH
      else
        echo "No new changes to release."
      fi
