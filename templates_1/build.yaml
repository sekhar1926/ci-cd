# ===================================================================================
# ==                       README: UNIVERSAL BUILD TEMPLATE                      ==
# ===================================================================================
#
# PURPOSE:
# This template defines the standardized process for building any Kotlin-based
# microservice in the platform. It is designed to be called by an application's
# main pipeline and ensures every service is built and tested consistently.
#
# KEY FEATURES & RESPONSIBILITIES:
# 1.  **Dedicated Build Agent:** It exclusively uses the 'MB_DevOps' agent pool. This
#     is a hardcoded security and governance feature to ensure builds always run on
#     agents with the correct tools, proxies, and artifact repository access.
#
# 2.  **Build & Test:** It runs the standard `gradle build` command, which handles
#     compiling the application's source code and executing all unit tests. Test
#     results are published back to the pipeline run.
#
# 3.  **Intelligent Image Tagging:** It automatically generates a unique and descriptive
#     Docker image tag based on the Git branch or tag that triggered the build:
#       - Push to `develop` branch -> `dev-<commit-hash>` (e.g., `dev-a1b2c3d`)
#       - Push to `release/*` branch -> `release-*-rc` (e.g., `release-1.2.0-rc`)
#       - Push of a `v*.*.*` tag -> a clean version number (e.g., `1.2.0`)
#
# 4.  **Optimized Image Pushing (Build Caching):** Before attempting a build, it uses
#     the Azure CLI to check if an image with the exact same tag already exists in
#     the Azure Container Registry (ACR). If it does, the time-consuming build and
#     push steps are skipped. This optimization prevents redundant work and does not
#     run for Pull Request validation builds.
#
# PARAMETERS (Inputs from the calling pipeline):
#   - serviceName: The name of the microservice being built (e.g., 'order-service').
#   - acrName: The name of your Azure Container Registry.
#   - acrConnection: The name of the Azure DevOps service connection to ACR.
#
# ===================================================================================

parameters:
  - name: serviceName
    type: string
  - name: acrName
    type: string
  - name: acrConnection
    type: string

stages:
- stage: Build
  displayName: 'Build and Push Application'
  jobs:
  - job: BuildJob
    displayName: 'Build, Test & Push Docker Image'
    pool:
      # This pool is hardcoded to ensure all builds use the correct, secure agent.
      name: 'MB_DevOps'
    steps:
      - task: Gradle@2
        displayName: 'Run Unit Tests & Build with Gradle'
        inputs:
          tasks: 'build'
          publishJUnitResults: true
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'

      - bash: |
          # This script determines the image tag based on Git context.
          BRANCH_NAME="$(Build.SourceBranchName)"
          TAG_NAME="$(Build.SourceBranch)"
          if [[ $TAG_NAME == "refs/tags/v"* ]]; then
            VERSION_TAG=${TAG_NAME#refs/tags/v}
          elif [[ $BRANCH_NAME == "develop" ]]; then
            VERSION_TAG="dev-$(Build.SourceVersion)"
          else
            CLEAN_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g')
            VERSION_TAG="$CLEAN_BRANCH_NAME-rc"
          fi
          echo "Determined Image Tag: $VERSION_TAG"
          echo "##vso[task.setvariable variable=imageTag;isOutput=true]$VERSION_TAG"
        displayName: 'Determine Image Tag'
        name: SetImageTag

      - task: AzureCLI@2
        displayName: 'Check if Docker image already exists in ACR'
        name: CheckACR
        inputs:
          azureSubscription: ${{ parameters.acrConnection }}
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            IMAGE_TAG=$(SetImageTag.imageTag)
            echo "Checking for image: ${{ parameters.serviceName }}:$IMAGE_TAG in ACR: ${{ parameters.acrName }}"
            # The 'az acr...' command will error if the tag doesn't exist. '|| true' prevents pipeline failure.
            MANIFEST=$(az acr repository show-manifests --name ${{ parameters.acrName }} --repository ${{ parameters.serviceName }} --query "[?tags[0]=='$IMAGE_TAG']" -o tsv) || true
            if [[ -n "$MANIFEST" ]]; then
              echo "Image with tag $IMAGE_TAG already exists. Skipping build."
              echo "##vso[task.setvariable variable=ImageExists;isOutput=true]true"
            else
              echo "Image with tag $IMAGE_TAG not found. Proceeding with build."
              echo "##vso[task.setvariable variable=ImageExists;isOutput=true]false"
            fi

      - task: Docker@2
        displayName: 'Build and Push Docker Image to ACR'
        # This step only runs if it's not a PR and the image doesn't already exist.
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['CheckACR.ImageExists'], 'false'))
        inputs:
          containerRegistry: ${{ parameters.acrConnection }}
          repository: ${{ parameters.serviceName }}
          command: 'buildAndPush'
          dockerfile: '**/Dockerfile'
          tags: '$(SetImageTag.imageTag)'