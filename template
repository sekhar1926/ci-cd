# ===================================================================================
# ==                       UNIVERSAL BUILD TEMPLATE (v2)                         ==
# ===================================================================================
#
# This template now hardcodes the build agent pool to 'MB_DevOps' to ensure
# all builds run in the correct, secure environment with access to artifacts.
#

parameters:
  # The 'agentPoolName' parameter has been REMOVED.
  - name: serviceName
    type: string
  - name: acrName
    type: string
  - name: acrConnection
    type: string

stages:
- stage: Build
  displayName: 'Build and Push Application'
  jobs:
  - job: BuildJob
    displayName: 'Build, Test & Push Docker Image'
    pool:
      # THIS IS THE KEY CHANGE: The pool is now hardcoded.
      name: 'MB_DevOps'
    steps:
      # ... (All other steps for Gradle, image tagging, and Docker push remain exactly the same)
      - task: Gradle@2
        displayName: 'Run Unit Tests & Build with Gradle'
        inputs:
          tasks: 'build'
          publishJUnitResults: true
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'

      - bash: |
          # ... (script to determine image tag)
          BRANCH_NAME="$(Build.SourceBranchName)"
          TAG_NAME="$(Build.SourceBranch)"
          if [[ $TAG_NAME == "refs/tags/v"* ]]; then
            VERSION_TAG=${TAG_NAME#refs/tags/v}
          elif [[ $BRANCH_NAME == "develop" ]]; then
            VERSION_TAG="dev-$(Build.SourceVersion)"
          else
            CLEAN_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g')
            VERSION_TAG="$CLEAN_BRANCH_NAME-rc"
          fi
          echo "Determined Image Tag: $VERSION_TAG"
          echo "##vso[task.setvariable variable=imageTag;isOutput=true]$VERSION_TAG"
        displayName: 'Determine Image Tag'
        name: SetImageTag

      - task: AzureCLI@2
        # ... (script to check if image exists in ACR)
        displayName: 'Check if Docker image already exists in ACR'
        name: CheckACR
        inputs:
          azureSubscription: ${{ parameters.acrConnection }}
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            IMAGE_TAG=$(SetImageTag.imageTag)
            MANIFEST=$(az acr repository show-manifests --name ${{ parameters.acrName }} --repository ${{ parameters.serviceName }} --query "[?tags[0]=='$IMAGE_TAG']" -o tsv) || true
            if [[ -n "$MANIFEST" ]]; then
              echo "Image with tag $IMAGE_TAG already exists. Skipping build."
              echo "##vso[task.setvariable variable=ImageExists;isOutput=true]true"
            else
              echo "Image with tag $IMAGE_TAG not found. Proceeding with build."
              echo "##vso[task.setvariable variable=ImageExists;isOutput=true]false"
            fi

      - task: Docker@2
        displayName: 'Build and Push Docker Image to ACR'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['CheckACR.ImageExists'], 'false'))
        inputs:
          containerRegistry: ${{ parameters.acrConnection }}
          repository: ${{ parameters.serviceName }}
          command: 'buildAndPush'
          dockerfile: '**/Dockerfile'
          tags: '$(SetImageTag.imageTag)'


