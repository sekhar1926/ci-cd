# ===================================================================================
# ==                 UNIVERSAL MULTI-STAGE DEPLOYMENT TEMPLATE                   ==
# ===================================================================================
#
# This template orchestrates the deployment of a microservice to DEV, QA, and PROD
# environments on AKS using a common Helm chart.
#
# How it works:
# 1. It is triggered by a main application pipeline after a successful build.
# 2. It contains three distinct stages: 'Deploy_Dev', 'Deploy_QA', 'Deploy_Prod'.
# 3. Each stage has a 'condition' that ensures it only runs for the correct
#    Git branch or tag (e.g., 'develop' for Dev, 'release/*' for QA, 'v*' tag for Prod).
# 4. It uses the 'HelmDeploy@0' task to install or upgrade the application.
# 5. It dynamically constructs the 'overrideValues' for Helm by combining standard
#    values (like the image tag) with a block of environment-specific values
#    provided by the calling application pipeline.
#
# Parameters:
#   - serviceName: The name of the microservice (e.g., 'order-service').
#   - acrName: The name of your Azure Container Registry.
#   - chartPath: The path to the common Helm chart within the 'cicd-platform' repo.
#   - agentPoolName: The name of the self-hosted agent pool to use.
#   - dev/qa/prod-AKSConnection: Service connection names for each AKS cluster.
#   - dev/qa/prod-OverrideValues: YAML strings containing environment-specific
#     configurations for the Helm chart.
#

parameters:
  # --- Application & Infrastructure Info ---
  - name: serviceName
    type: string
  - name: acrName
    type: string
  - name: agentPoolName
    type: string

  # --- Helm Chart Path (within the templates repo) ---
  - name: chartPath
    type: string # e.g., 'charts/common-app'
    
  # --- Service Connections for each environment's AKS cluster ---
  - name: devAKSConnection
    type: string
  - name: qaAKSConnection
    type: string
  - name: prodAKSConnection
    type: string
    
  # --- Environment-specific override values (as multi-line YAML strings) ---
  - name: devOverrideValues
    type: string
    default: ''
  - name: qaOverrideValues
    type: string
    default: ''
  - name: prodOverrideValues
    type: string
    default: ''

stages:
# ============================== DEPLOY TO DEV ==============================
- stage: Deploy_Dev
  displayName: 'Deploy to Dev Environment'
  dependsOn: Build # Assumes a preceding stage named 'Build'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  variables:
    # Fetches the image tag calculated in the 'Build' stage
    imageTag: $[ stageDependencies.Build.BuildJob.outputs['SetImageTag.imageTag'] ]
  jobs:
  - deployment: DeployToDevAKS
    displayName: 'Deploy Helm Chart to DEV AKS'
    environment: 'DEV Environment' # Links to the ADO Environment for history/tracking
    pool: { name: ${{ parameters.agentPoolName }} }
    strategy:
      runOnce:
        deploy:
          steps:
          - task: HelmDeploy@0
            displayName: 'Execute Helm Upgrade for Dev'
            inputs:
              connectionType: 'AzureResourceGroup'
              azureSubscription: ${{ parameters.devAKSConnection }}
              namespace: '${{ parameters.serviceName }}-dev'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/templates/${{ parameters.chartPath }}'
              releaseName: ${{ parameters.serviceName }}
              install: true
              overrideValues: |
                image.repository=${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}
                image.tag=$(imageTag)
                ${{ parameters.devOverrideValues }}

# ============================== DEPLOY TO QA ===============================
- stage: Deploy_QA
  displayName: 'Deploy to QA Environment'
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
  variables:
    imageTag: $[ stageDependencies.Build.BuildJob.outputs['SetImageTag.imageTag'] ]
  jobs:
  - deployment: DeployToQAAKS
    displayName: 'Deploy Helm Chart to QA AKS'
    environment: 'QA Environment' # This environment should have a manual approval check
    pool: { name: ${{ parameters.agentPoolName }} }
    strategy:
      runOnce:
        deploy:
          steps:
          - task: HelmDeploy@0
            displayName: 'Execute Helm Upgrade for QA'
            inputs:
              connectionType: 'AzureResourceGroup'
              azureSubscription: ${{ parameters.qaAKSConnection }}
              namespace: '${{ parameters.serviceName }}-qa'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/templates/${{ parameters.chartPath }}'
              releaseName: ${{ parameters.serviceName }}
              install: true
              overrideValues: |
                image.repository=${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}
                image.tag=$(imageTag)
                ${{ parameters.qaOverrideValues }}

# ============================= DEPLOY TO PROD ==============================
- stage: Deploy_Prod
  displayName: 'Deploy to Prod Environment'
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
  variables:
    imageTag: $[ stageDependencies.Build.BuildJob.outputs['SetImageTag.imageTag'] ]
  jobs:
  - deployment: DeployToProdAKS
    displayName: 'Deploy Helm Chart to PROD AKS'
    environment: 'PROD Environment' # This environment MUST have a strict manual approval check
    pool: { name: ${{ parameters.agentPoolName }} }
    strategy:
      runOnce:
        deploy:
          steps:
          - task: HelmDeploy@0
            displayName: 'Execute Helm Upgrade for Prod'
            inputs:
              connectionType: 'AzureResourceGroup'
              azureSubscription: ${{ parameters.prodAKSConnection }}
              namespace: '${{ parameters.serviceName }}-prod'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/templates/${{ parameters.chartPath }}'
              releaseName: ${{ parameters.serviceName }}
              install: true
              overrideValues: |
                image.repository=${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}
                image.tag=$(imageTag)
                ${{ parameters.prodOverrideValues }}