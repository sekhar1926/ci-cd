# ===================================================================================
# ==                 MICROSERVICE CI/CD PIPELINE (order-service)                 ==
# ===================================================================================
#
# This pipeline is the single source of truth for building and deploying this specific
# microservice.
#
# It does not contain complex logic. Instead, it defines application-specific
# configuration and calls reusable templates from the central 'cicd-platform' repo.
#

# --- Triggers: Defines WHEN this pipeline runs ---
trigger:
  branches:
    include:
      - main
      - develop
      - release/*
  tags:
    include:
      - v*.*.* # Trigger for production deployments

pr:
  branches:
    include:
      - main
      - develop
      - release/*

# --- Resources: Connects to the central CI/CD platform templates ---
resources:
  repositories:
    - repository: templates
      type: git
      # IMPORTANT: Replace 'YourProject' with your actual Azure DevOps project name.
      name: YourProject/cicd-platform
      # BEST PRACTICE: For production stability, pin this to a specific version tag
      # of your platform repo, e.g., 'refs/tags/v1.0.0'
      ref: main

# --- Variables: Defines the unique configuration for THIS microservice ---
variables:
  # --- Global Info for this Service ---
  - name: serviceName
    value: 'order-service'
  - name: acrName
    value: 'mycompanyacr' # Your Azure Container Registry name
  - name: chartPath
    value: 'charts/common-app' # Path to the chart in the platform repo

  # --- Agent Pool Names for each Environment ---
  - name: devAgentPoolName
    value: 'Dev-General-Pool'
  - name: qaAgentPoolName
    value: 'QA-General-Pool'
  - name: prodAgentPoolName
    value: 'Prod-Secure-Pool'
    
  # --- Service Connection Names (as configured in Azure DevOps) ---
  - name: acrConnection
    value: 'acr-service-connection'
  - name: devAKSConnection
    value: 'dev-aks-sc'
  - name: qaRegion1AKSConnection
    value: 'qa-eastus-aks-sc'
  - name: qaRegion2AKSConnection
    value: 'qa-westus-aks-sc'
  - name: prodRegion1AKSConnection
    value: 'prod-eastus-aks-sc'
  - name: prodRegion2AKSConnection
    value: 'prod-westus-aks-sc'

# --- Stages: The sequence of operations, executed by calling templates ---
stages:
# STAGE 1: Build the application using the build template from the platform repo
- template: pipelines/build/kotlin-docker-build.yml@templates
  parameters:
    serviceName: $(serviceName)
    acrName: $(acrName)
    acrConnection: $(acrConnection)
    # The build process can use the development agent pool
    agentPoolName: $(devAgentPoolName)

# STAGE 2: Deploy the application using the full multi-region, multi-stage deploy template
- template: pipelines/deploy/aks-helm-deploy.yml@templates
  parameters:
    # --- Pass standard parameters ---
    serviceName: $(serviceName)
    acrName: $(acrName)
    chartPath: $(chartPath)
    
    # --- Pass agent pool parameters ---
    devAgentPoolName: $(devAgentPoolName)
    qaAgentPoolName: $(qaAgentPoolName)
    prodAgentPoolName: $(prodAgentPoolName)
    
    # --- Pass all regional service connections ---
    devAKSConnection: $(devAKSConnection)
    qaRegion1AKSConnection: $(qaRegion1AKSConnection)
    qaRegion2AKSConnection: $(qaRegion2AKSConnection)
    prodRegion1AKSConnection: $(prodRegion1AKSConnection)
    prodRegion2AKSConnection: $(prodRegion2AKSConnection)
    
    # ==============================================================================
    # ==     ENVIRONMENT-SPECIFIC CONFIGURATION FOR 'order-service'               ==
    # ==============================================================================
    #
    # These multi-line YAML blocks are the "payload" that configures the Helm chart
    # for each specific environment.

    # --- CONFIGURATION FOR THE DEV ENVIRONMENT ---
    devOverrideValues: |
      replicaCount: 1
      virtualServerRoute:
        path: "/orders"
        parentVirtualServerName: "my-company-dev-vs"
        parentVirtualServerNamespace: "nginx-ingress"
      extraEnvs:
        SPRING_PROFILES_ACTIVE: "dev"
        LOGGING_LEVEL: "DEBUG"
        CACHE_ENABLED: "false"
        PAYMENT_GATEWAY_TIMEOUT_MS: "10000"
        FEATURE_FLAG_NEW_CHECKOUT: "true"
      secretProvider:
        parameters:
          keyvaultName: "order-service-dev-kv"
          tenantId: "YOUR_AZURE_TENANT_ID"
          secrets:
          - name: order-db-connection-string
            alias: DB_CONNECTION_STRING
          - name: rabbitmq-connection-string
            alias: AMQP_URL
          - name: payment-gateway-api-key
            alias: PAYMENT_API_KEY
          - name: shipping-service-auth-token
            alias: SHIPPING_SVC_TOKEN
          - name: redis-password
            alias: REDIS_PASS

    # --- CONFIGURATION FOR THE QA ENVIRONMENT ---
    qaOverrideValues: |
      replicaCount: 2
      virtualServerRoute:
        path: "/orders"
        parentVirtualServerName: "my-company-qa-vs"
        parentVirtualServerNamespace: "nginx-ingress"
      extraEnvs:
        SPRING_PROFILES_ACTIVE: "qa"
        LOGGING_LEVEL: "INFO"
        CACHE_ENABLED: "true"
        PAYMENT_GATEWAY_TIMEOUT_MS: "3000"
        FEATURE_FLAG_NEW_CHECKOUT: "true"
      secretProvider:
        parameters:
          keyvaultName: "order-service-qa-kv"
          tenantId: "YOUR_AZURE_TENANT_ID"
          secrets:
          - name: qa-order-db-connection-string
            alias: DB_CONNECTION_STRING
          - name: qa-rabbitmq-connection-string
            alias: AMQP_URL
          - name: qa-payment-gateway-api-key
            alias: PAYMENT_API_KEY
          - name: qa-shipping-service-auth-token
            alias: SHIPPING_SVC_TOKEN
          - name: qa-redis-password
            alias: REDIS_PASS

    # --- CONFIGURATION FOR THE PROD ENVIRONMENT ---
    prodOverrideValues: |
      replicaCount: 5
      virtualServerRoute:
        path: "/orders"
        parentVirtualServerName: "my-company-prod-vs"
        parentVirtualServerNamespace: "nginx-ingress"
      extraEnvs:
        SPRING_PROFILES_ACTIVE: "prod"
        LOGGING_LEVEL: "WARN"
        CACHE_ENABLED: "true"
        PAYMENT_GATEWAY_TIMEOUT_MS: "1500"
        FEATURE_FLAG_NEW_CHECKOUT: "false"
      secretProvider:
        parameters:
          keyvaultName: "order-service-prod-kv"
          tenantId: "YOUR_AZURE_TENANT_ID"
          secrets:
          - name: prod-order-db-connection-string
            alias: DB_CONNECTION_STRING
          - name: prod-rabbitmq-connection-string
            alias: AMQP_URL
          - name: prod-payment-gateway-api-key
            alias: PAYMENT_API_KEY
          - name: prod-shipping-service-auth-token
            alias: SHIPPING_SVC_TOKEN
          - name: prod-redis-password
            alias: REDIS_PASS