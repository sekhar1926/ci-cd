  # STEP 3: Calculate the next version using a dedicated script file.
  - task: Bash@3
    displayName: 'Calculate Next Version for ${{ parameters.repositoryName }}'
    name: CalculateVersion
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    env:
      GIT_TOKEN: $(System.AccessToken)
      # Pass the repository name as an environment variable to the script
      REPO_NAME: ${{ parameters.repositoryName }}
    script: |
      # Write the logic to a shell script file. The 'EOF' ensures no variable expansion happens here.
      cat <<'EOF' > run-semantic.sh
      #!/bin/bash
      set -e # Exit on error
      
      echo "--- Inside run-semantic.sh ---"
      
      # Run semantic-release and capture its output
      VERSION_JSON=$(npx semantic-release --dry-run -b main)

      if [ -z "$VERSION_JSON" ]; then
        echo "No new changes for $REPO_NAME. No release will be created."
        echo "##vso[task.setvariable variable=SkipCreation]true"
      else
        # Use npx jq, which was installed locally
        NEXT_VERSION=$(echo "$VERSION_JSON" | npx jq -r '.nextRelease.version')
        echo "Next version for $REPO_NAME is: $NEXT_VERSION"
        echo "##vso[task.setvariable variable=SkipCreation]false"
        echo "##vso[task.setvariable variable=NextVersion;isOutput=true]$NEXT_VERSION"
      fi
      EOF

      # Make the script executable
      chmod +x run-semantic.sh
      
      # Execute the script
      ./run-semantic.sh
  # =======================================================================

  # STEP 4: Create and push the release branch.
  - task: Bash@3
    displayName: 'Create Release Branch for ${{ parameters.repositoryName }}'
    condition: and(succeeded(), eq(variables['CalculateVersion.SkipCreation'], 'false'))
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    env:
      GIT_TOKEN: $(System.AccessToken)
    script: |
      set -e
      git config --global user.email "pipeline@azuredevops.com"
      git config --global user.name "Azure DevOps Pipeline"
      
      RELEASE_BRANCH="release/$(CalculateVersion.NextVersion)"
      git checkout -b $RELEASE_BRANCH

      REPO_URL=$(git config --get remote.origin.url)
      AUTH_REPO_URL="https://x-token-auth:$(GIT_TOKEN)@${REPO_URL#https://}"
      git push $AUTH_REPO_URL $RELEASE_BRANCH

      echo "Successfully created and pushed $RELEASE_BRANCH for repository ${{ parameters.repositoryName }}"