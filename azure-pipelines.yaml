# ===================================================================================
# ==           README: Create Single Service Release Pipeline (Self-Contained)   ==
# ===================================================================================
#
# PURPOSE:
# This is a self-contained pipeline for starting a new release for a SINGLE
# microservice. It is designed for simplicity.
#
# HOW IT WORKS:
# 1.  **Manual Trigger:** A Release Manager runs this pipeline from the ADO UI.
# 2.  **Service Dropdown:** The user is presented with a dropdown list of microservices.
#     This list is maintained DIRECTLY in the 'parameters' section of this file.
# 3.  **Cross-Project Checkout:** It checks out the selected microservice repository,
#     which can be in a different Azure DevOps project within the same organization.
# 4.  **Automated Release Creation:** The pipeline automates version calculation and
#     release branch creation for the selected service.
#
# HOW TO MAINTAIN:
# To add a new service to the dropdown, you must edit the 'values' list under the
# 'repositoryName' parameter in this file.
#
# ===================================================================================

trigger: none
pr: none

# We must declare the cross-project repository as a resource to be able to check it out.
# We use a parameter for the repo name to make it dynamic.
resources:
  repositories:
    - repository: MicroserviceRepo # A generic identifier for the checkout step
      # The name is dynamically set by the chosen parameter.
      name: $(repositoryName)
      type: git

parameters:
- name: microserviceProjectName
  displayName: 'Microservice Project Name'
  type: string
  default: 'Your-App-Project-Name' # e.g., ManuBank-Apps

- name: repositoryName
  displayName: 'Microservice to Release'
  type: string
  default: 'order-service'
  values:
    # The list of services is maintained directly here.
    - order-service
    - payment-service
    - shipping-service
    - inventory-service
    - user-profile-service
    - manubank-transactions-microservice
    # Add new service repository names to this list.

pool:
  name: 'MB_DevOps'

jobs:
- job: CreateReleaseForSingleService
  displayName: 'Create Release for ${{ parameters.repositoryName }}'
  
  steps:
  # Step 1: Install required Node.js packages locally.
  - task: Bash@3
    displayName: 'Install Tools'
    inputs:
      targetType: 'inline'
      script: |
        echo '{ "name": "create-release-tools", "version": "1.0.0" }' > package.json
        npm install semantic-release @semantic-release/git jq-cli-wrapper
    
  # ============================ THE FIX IS HERE ============================
  # Step 2: Check out the 'develop' branch of the selected microservice repo
  # from the OTHER project.
  - checkout: git://${{ parameters.microserviceProjectName }}/${{ parameters.repositoryName }}@develop
    persistCredentials: true
  # =======================================================================

  # Step 3: Calculate the next version number.
  - task: Bash@3
    displayName: 'Calculate Next Version for ${{ parameters.repositoryName }}'
    name: CalculateVersion
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    script: |
      VERSION_JSON=$(npx semantic-release --dry-run -b main)

      if [ -z "$VERSION_JSON" ]; then
        echo "No new changes for ${{ parameters.repositoryName }}. No release will be created."
        echo "##vso[task.setvariable variable=SkipCreation]true"
      else
        NEXT_VERSION=$(echo "$VERSION_JSON" | npx jq -r '.nextRelease.version')
        echo "Next version for ${{ parameters.repositoryName }} is: $NEXT_VERSION"
        echo "##vso[task.setvariable variable=SkipCreation]false"
        echo "##vso[task.setvariable variable=NextVersion;isOutput=true]$NEXT_VERSION"
      fi

  # Step 4: Create and push the release branch.
  - task: Bash@3
    displayName: 'Create Release Branch for ${{ parameters.repositoryName }}'
    condition: and(succeeded(), eq(variables['CalculateVersion.SkipCreation'], 'false'))
    env:
      GIT_TOKEN: $(System.AccessToken)
    script: |
      set -e
      git config --global user.email "pipeline@azuredevops.com"
      git config --global user.name "Azure DevOps Pipeline"
      
      RELEASE_BRANCH="release/$(CalculateVersion.NextVersion)"
      echo "Creating branch: $RELEASE_BRANCH from develop"
      git checkout -b $RELEASE_BRANCH

      REPO_URL=$(git config --get remote.origin.url)
      AUTH_REPO_URL="https://x-token-auth:$(GIT_TOKEN)@${REPO_URL#https://}"
      git push $AUTH_REPO_URL $RELEASE_BRANCH

      echo "Successfully created and pushed $RELEASE_BRANCH for repository ${{ parameters.repositoryName }}"